#Summary MongoDB 
#Ariadna Elizabeth Moo Sosa 



             
#Variable assignement
>var beverages = {
    "name" : "Telepathic"
     "status" : "Active"
  }


#Acces the variable to see the contents 

>beverages
{
      "name" : "Telephatic",
       "status": "Active"
}


#switches to use the database and creates it if does not exist when we write to it 
>uses reviews 


#returns the database 
>db



#Show list of commands 
>help 


#Show list of databases 
>show dbs 



#write to the database 
>db.beverage.insert(
  {
    "name" : "Telepathic ",
    "status": "Active"
   }
)




#find collection method to retrieve the potion from the #inventory collection

>db.beverage.find()
{

     "_id": ObjectId("559f07d741894edebdd8aa6d"),
     "name": "Telepathic",
     "status": "Active"

}


#finding a specific potion with a query 
> db.beverages.find({"name": "Telepathic"})
{
  "_id": ObjectId("559f07d741894edebdd8aa6d"),
  "name": "Telepathic",
  "status": "Active"
}




#Queries that return multiple values .It means that more than a document matches the query 
> db.beverage.find({"status":  "Active"})

{
"_id": ObjectId("55d232a5819aa726..."),
"name": "Telepathic",
"status": "Active"
}
{
"_id": ObjectId("55c3b9501aad0cb0..."),
"name": "Burn",
"status": "Active"
}



#use insert to add values 
> db.beverage.insert(

{
"name": "Telepathic",
"status": "Active",
"price": 10.99,
"score": 59
"ingredients": ["newt toes", 42, "laughter"],
"ratings": {"strength": 2, "flavor": 5}
  }
)



#Finding array values 
> db.beverage.find({"ingredients": "laughter"})
 {
"_id": "ObjectId(...)",
"name": "Telepathic",
"ingredients": ["newt toes","secret", "laughter"]
}


#Delete a single docuement by using the remote collection method 
>db.beverages.remove(
    {"name":"Love"}
  )



#Delete multiple Documents with {} with remove.

>db.beverages.remove(
     {"status":Active}
  )


#Update a document with $ operator 

>db.beverages.update(
   {"name": "Love"},
   {"$set":  {"price ":5.66}}
   )

#Update multiple doucuments

>db.beverages.update( 
    { "status": "KC"},
    { "$set": { "vendor": "Active"}},
     {"multi": true}
  )

#Update a document's count with $inc operator 

>db.logs.update(
   {"potion":"Burn"},
   {"$inc": "count" :1}}
  ) 


#Comparision greater operators

#$gt    greater than 
#$gte   greather than o equal to 
#$ne     no equal to 
#$lt      less than 
#$lte    less than or equal to 

#find out which beverages have a price less than 30 with $lt operator 
>db.beverages.find({"price":  {"$lt":30}})

#find out which beverages have prices gretaer then 20 and less than 20 
>db.beverages.find({"price": {"$gt":20 ,  "$lt":30}})

#find() takes a second parameter called a “projection” and return back by setting their value to true with the fields that you want to select 

>db.beverages.find(
    {"grade": {"$gte":80}},
    {"status": true, "name":true}
)

{
    "_id": ObjectId(...),
    "status":"Active",
    "name":"Telepathic"
}
...

#excluiding the id field is the only field that can be set to false (this uselful for preparing data reports for non developers)

>db.beverages.find(
   {"grade": {"$gte": 80}},
   {"vendor": true, "price": true, "id":false}
)
{
   "vendor": "Homebrewed",
   "price": 9.99
}

#introducing the order
#Whenever we search for documents, an object is returned from the find method called a “cursor object.” by default the first 20 documents are printed 

>db.beverages.find("status": "Active"} )
{"_id": ObjectId(...), ... }
{"_id": ObjectId(...), ... }
{"_id": ObjectId(...), ... }
...

#introducing through the order “it” will display the next 20 documents in the cursor.


>db.beverages.find()
> it
type "it" for more



#cursor method that returns the count of matching documents

>db.beverages.find().count()
80

#Embedding comments 

{
     "name": "Telephatic",
          ...
      "comments": [
         {
      "title": "The best brevage",
      "body":   "ingredients"
          },
      ...
        ]
}
    

#Introducing the aggregation framework 

>db.brevages.aggregate(
  [{"$group":  {"_id":   "$vendor_id" }} ]
)



#Referencing users in comments

{
    "name": "Telephatic",
      ...
     "comments": [
         {
     "title": "The best brevage",
     "body":   "ingredients"
     "user_id": "Shark"
          },
       ...
    ]
}

#Introducing the aggregation framework 

>db.brevages.aggregate(
  [{"$group":  {"_id":   "$vendor_id" }} ]
)



#frecuently  asked questions in MongoDb

Q.1What is MongoDB and Why we need MongoDB?

MongoDB is a document oriented database which means it stores the data in BSON format which is a binary representation of JSON and it contains more data types than JSON.



Q2.What is difference between MongoDB and SQL or NoSQL between SQL?

In SQL, data is stored in Table format whereas in MongoDB, it stores in JSON format.

In MongoDB, development is simplified as its documents map naturally to modern, object-oriented programming languages. In SQL, we need object-relational mapping (ORM) layer that translates objects in code to relational tables.



Q3. What is BSON in MongoDB?

MongoDB stores data as BSON documents. BSON is a binary representation of JSON documents, though it contains more data types than JSON. Some of the supported data types are: Double, String, Object, Array, Binary Data, RegEx, Boolean, Date, Null, JavaScript, Timestamp. ObjectId.


Some of the features of BSON:

BSON is lightweight and is an important feature for any data representation format, especially when used over the network.
BSON is designed to be traversed easily.
It is efficient. Encoding data to BSON and decoding from BSON can be performed very quickly in most languages



Q.4.What is writeConcern?

Whenever we query the database to insert(), insertOne() or insertMany(), we can pass an additional parameter which is writeConcern. It is a document describes the level of acknowledgement requested from MongoDB for write operations. Write concern can include the following fields:


the w option to request acknowledgement that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.
the j option to request acknowledgement that the write operation has been written to the journal, and
the wtimeout option to specify a time limit to prevent write operations from blocking indefinitely.


Q5. What is sharding?

Sharding means to store the data on the multiple machines.


Q6. What is Aggregation in MongoDB?

Aggregations are operations that process data records and return computed results.


Q7. Define the namespace in mongodb?

It is the concatenation of collection name and database.


Q8.Explain Replication.

Replication is the process of synchronizing data across multiple servers.


Q9. Which method is used to create an index?


CreateIndex() method is used to create an index.


Q10.Which command is used to create the backup of database?

Mongodump command is used to create the backup of database.


Q11.Define Map reduce.

Map-reduce is a generic multi-phase data aggregation modality which is used for processing quantities of data.

Q12.How do I define or alter the collection schema?

You do not need to specify a schema for a collection in MongoDB. Although it is common for the documents in a collection to have a largely homogeneous structure, it is not a requirement; i.e. documents in a single collection do not need to have the same set of fields. The data type for a field can differ across documents in a collection as well.

To change the structure of the documents in a collection, update the documents to the new structure. For instance, add new fields, remove existing ones, or update the value of a field to a new type.

Q13.How does MongoDB address SQL or Query injection?

BSON
As a client program assembles a query in MongoDB, it builds a BSON object, not a string. Thus traditional SQL injection attacks are not a problem. More details and some nuances are covered below.

MongoDB represents queries as BSON objects. Typically client libraries provide a convenient, injection free, process to build these objects. Consider the following C++ example:



>BSONObj my_query = BSON( "name" << a_name );
>auto_ptr<DBClientCursor> cursor = c.query("tutorial.persons", my_query);

Here, my_query then will have a value such as { name : "Joe" }. If my_query contained special characters, for example ,, :, and {, the query simply wouldn’t match any documents. For example, users cannot hijack a query and convert it to a delete.

Q14.What’s a Master or Primary?

This is a node/member which is currently the primary and processes all writes for the replica set. During a failover event in a replica set, a different member can become primary.


Q15.What’s a Secondary or Slave?

A secondary is a node/member which applies operations from the current primary. This is done by tailing the replication oplog (local.oplog.rs). Replication from primary to secondary is asynchronous, however, the secondary will try to stay as close to current as possible (often this is just a few milliseconds on a LAN).























References:

https://medium.com/@vigowebs/frequently-asked-mongodb-interview-questions-and-answers-1f17c6b0950d
https://intellipaat.com/interview-question/mongodb-interview-questions/
https://docs.mongodb.com/manual/faq/fundamentals/#how-does-mongodb-address-sql-or-query-injection




